

#include <iostream>
#include <vector>

using namespace std;

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        // Initialize the triangle vector
        vector<vector<int>> triangle;

        // Edge case: if numRows is less than or equal to 0, return an empty triangle
        if (numRows <= 0) {
            return triangle;
        }

        // Generate each row of the triangle
        for (int i = 0; i < numRows; ++i) {
            // Create a new row
            vector<int> row;

            // Populate the row with appropriate values
            for (int j = 0; j <= i; ++j) {
                if (j == 0 || j == i) {
                    // The first and last elements of each row are 1
                    row.push_back(1);
                } else {
                    // Other elements are the sum of the two elements directly above in the previous row
                    row.push_back(triangle[i - 1][j - 1] + triangle[i - 1][j]);
                }
            }

            // Add the row to the triangle
            triangle.push_back(row);
        }

        return triangle;
    }
};

// Helper function to print the triangle
void printTriangle(const vector<vector<int>>& triangle) {
    for (const auto& row : triangle) {
        for (int num : row) {
            cout << num << " ";
        }
        cout << endl;
    }
}

int main() {
    Solution solution;
    int numRows = 5;
    vector<vector<int>> result = solution.generate(numRows);
    printTriangle(result);
    return 0;
}
